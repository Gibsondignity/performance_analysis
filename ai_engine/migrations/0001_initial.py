# Generated by Django 5.2.1 on 2025-09-12 02:42

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('performance_app', '0013_evaluation_evaluation_type'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='TrainedModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('model_type', models.CharField(choices=[('SCORING', 'Performance Scoring'), ('PREDICTION', 'Performance Prediction'), ('CLUSTERING', 'Employee Clustering'), ('ANOMALY', 'Anomaly Detection')], max_length=20)),
                ('algorithm', models.CharField(max_length=50)),
                ('version', models.CharField(max_length=20)),
                ('model_data', models.BinaryField()),
                ('metadata', models.JSONField(default=dict)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='PerformanceInsight',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('insight_type', models.CharField(choices=[('TREND', 'Trend Analysis'), ('COMPARISON', 'Comparative Analysis'), ('FORECAST', 'Performance Forecast'), ('CLUSTER', 'Cluster Analysis')], max_length=20)),
                ('content', models.TextField()),
                ('key_findings', models.JSONField(default=list)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('affected_employees', models.ManyToManyField(to='performance_app.employeeprofile')),
                ('generated_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Recommendation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('priority', models.CharField(choices=[('LOW', 'Low'), ('MEDIUM', 'Medium'), ('HIGH', 'High'), ('CRITICAL', 'Critical')], default='MEDIUM', max_length=10)),
                ('category', models.CharField(max_length=50)),
                ('actionable_steps', models.JSONField(default=list)),
                ('expected_impact', models.TextField(blank=True)),
                ('is_implemented', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('employee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='performance_app.employeeprofile')),
            ],
        ),
        migrations.CreateModel(
            name='Prediction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('prediction_type', models.CharField(max_length=50)),
                ('predicted_value', models.FloatField()),
                ('confidence_score', models.FloatField(blank=True, null=True)),
                ('prediction_date', models.DateField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('based_on_records', models.ManyToManyField(to='performance_app.performancerecord')),
                ('employee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='performance_app.employeeprofile')),
                ('model_used', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='ai_engine.trainedmodel')),
            ],
        ),
        migrations.CreateModel(
            name='Anomaly',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('anomaly_type', models.CharField(choices=[('PERFORMANCE_SPIKE', 'Performance Spike'), ('PERFORMANCE_DROP', 'Performance Drop'), ('ENGAGEMENT_CHANGE', 'Engagement Change'), ('TREND_BREAK', 'Trend Break')], max_length=20)),
                ('description', models.TextField()),
                ('severity_score', models.FloatField()),
                ('detected_at', models.DateTimeField(auto_now_add=True)),
                ('is_acknowledged', models.BooleanField(default=False)),
                ('employee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='performance_app.employeeprofile')),
                ('related_records', models.ManyToManyField(to='performance_app.performancerecord')),
                ('model_used', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='ai_engine.trainedmodel')),
            ],
        ),
    ]
